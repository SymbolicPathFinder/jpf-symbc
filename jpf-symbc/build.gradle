apply plugin: "java"
apply plugin: "maven-publish"

def getCurrentVersion() {
    "DEVELOPMENT-SNAPSHOT"
}

version = currentVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

ext.manifestCommonAttrbutes = manifest {
    attributes(
            "Built-By": System.getProperty("user.name"),
            "Implementation-Vendor": "NASA Ames Research Center",
            "Implementation-Version": version
    )
}

apply from: "gradle/ide-support.gradle"
apply from: "gradle/distribution.gradle"
apply from: "gradle/source-sets.gradle"
apply from: "gradle/build-resources.gradle"

dependencies {

    // Path of jpf-core build directory is declared as a dependencies for jpf-symbc (Line 35-37)
    def jpfLibs = fileTree("${project(':jpf-core').buildDir}") { include '*.jar' }
    def extLibs = fileTree(dir: 'lib', include: ['*.jar'])
    def libs = extLibs + jpfLibs

    //Following dependencies are pulled from mavenCentral() repositories
    
    //implementation 'org.opt4j:opt4j-core:3.1.4' //Tests are falling after implimetation
    implementation 'org.sat4j:org.sat4j.core:2.3.1'
    implementation 'jaxen:jaxen:1.1'
    implementation 'redis.clients:jedis:2.0.0'
    implementation 'commons-math:commons-math:1.2'
    implementation 'commons-lang:commons-lang:2.4'
    implementation 'org.choco-solver:choco-solver:4.10.4'
    implementation 'bcel:bcel:5.1'
    implementation 'com.googlecode.aima-java:aima-core:0.10.5'
    implementation 'com.martiansoftware:jsap:2.1'
    
    implementation libs
    classesImplementation libs
    peersImplementation libs
    examplesImplementation libs
    testImplementation libs

    testImplementation "junit:junit:4.12"
    
}

task compile {
    group = "SPF Build"
    description = "Compiles all JPF symbc sources."

    // These are automatic generated tasks from the Java Gradle Plugin.
    // Gradle is able to infer the order of the source sets
    // due to the compileClasspath attribute
    dependsOn compileExamplesJava
    dependsOn compileTestJava
}

task createJpfClassesJar(type: Jar) {
    archiveName = "jpf-symbc-classes.jar"
    destinationDir = file("${buildDir}")

    group = "SPF Jars"
    description = "Creates the ${archiveName} file."

    dependsOn compile
    dependsOn copyResources

    from sourceSets.main.java.outputDir
    from sourceSets.annotations.java.outputDir
    from sourceSets.classes.java.outputDir
}

task createJpfJar(type: Jar) {
    archiveName = "jpf-symbc.jar"
    destinationDir = file("${buildDir}")

    group = "SPF Jars"
    description = "Creates the ${archiveName} file."

    dependsOn compile
    dependsOn copyResources

    from sourceSets.main.java.outputDir
    from sourceSets.peers.java.outputDir
    from sourceSets.annotations.java.outputDir
    from sourceSets.classes.java.outputDir

    manifest {
        attributes "Implementation-Title": "Symbolic Pathfinder system"
        from manifestCommonAttrbutes
    }
}

task createAnnotationsJar(type: Jar) {
    archiveName = "jpf-symbc-annotations.jar"
    destinationDir = file("${buildDir}")

    group = "SPF Jars"
    description = "Creates the ${archiveName} file."

    dependsOn compile
    dependsOn copyResources

    from sourceSets.annotations.java.outputDir
}

task buildJars {
    group = "SPF Build"
    description = "Generates all jpf-symbc jar files."

    dependsOn createAnnotationsJar
    dependsOn createJpfClassesJar
    dependsOn createJpfJar
}


//test Task runs a collection of test cases using any supported test library i.e. Junit
test {
    description = "Runs core regression tests."

    dependsOn buildJars

    forkEvery = 1
    enableAssertions = true
    maxHeapSize = "1024m"

//exclude tag ---> gradle will not run the tests present under exclude tag
//include tag ---> gradle will run the tests present under include tag
    exclude "**/JPF_*.class"
    include "**/Test*.class"
    exclude "**/TestBitwise*.class"
    exclude "**/TestCoverage.class"
    exclude "**/TestDIV.class"
    exclude "**/TestExJPF.class"
    exclude "**/TestLazy*.class"    
    exclude "**/TestPathCondition.class"
    exclude "**/strings/*.class"
    exclude "/gov/nasa/jpf/symbc/strings/*.class"
    exclude "**/Test*\$*.class"
    exclude "**/TestSymbolicListener.class"
    include "**/TestSymbolicOutput.class"
    include "**/TestSymbolicJPF.class"

    testLogging {
        events "passed", "skipped", "failed"
    }

    afterSuite { testDescriptor, result ->
        if (!testDescriptor.parent) {
            println "Test Execution: ${result.resultType}"

            def summaryFields = ["${result.testCount} tests",
                                 "${result.successfulTestCount} passed",
                                 "${result.failedTestCount} failed",
                                 "${result.skippedTestCount} skipped"]

            println "Summary: " + summaryFields.join(", ")
        }
    }
}

/* This task is provided by the "maven-publish" plugin and it will publish 
   the Jars for local repository --> 'Users/.m2/gov/nasa' 
    */

publishing {
    publications {
        jpfSymbc(MavenPublication) {
            groupId = 'gov.nasa'
            version = '1.0.0'
            artifactId = 'jpf-symbc'
            artifact createJpfJar
        }
        jpfAnnotation(MavenPublication) {
            groupId = 'gov.nasa'
            version = '1.0.0'
            artifactId = 'jpf-annotations'
            artifact createAnnotationsJar
        }
        jpfClasses(MavenPublication) {
            groupId = 'gov.nasa'
            version = '1.0.0'
            artifactId = 'jpf-classes'
            artifact createJpfClassesJar
        }
    }
}

// By default this task will get execute by gradle
defaultTasks "buildJars"