Running Symbolic PathFinder ...
symbolic.dp=choco
symbolic.string_dp_timeout_ms=3000
symbolic.string_dp=ABC
symbolic.choco_time_bound=30000
symbolic.max_pc_length=2147483647
symbolic.max_pc_msec=0
symbolic.min_int=-1000000
symbolic.max_int=1000000
symbolic.min_double=-8.0
symbolic.max_double=7.0
JavaPathfinder core system v8.0 (rev 32) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
strings.StringSearch.main()

====================================================== search started: 10/2/15 2:17 PM
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 1
CONST_7 >= (Length_0_ + CONST_1) -> true

### PCs: total:1 sat:1 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 1
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:2 sat:2 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 2
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:3 sat:3 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 2
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:4 sat:4 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 3
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:5 sat:5 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 3
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:6 sat:6 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 4
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:7 sat:7 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 4
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:8 sat:8 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 5
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:9 sat:9 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 5
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:10 sat:10 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 6
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:11 sat:11 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:12 sat:12 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:13 sat:13 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:14 sat:14 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:15 sat:15 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:16 sat:16 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:17 sat:17 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:18 sat:18 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:19 sat:19 unsat:0

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:20 sat:19 unsat:1

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:21 sat:20 unsat:1

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:22 sat:21 unsat:1

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:23 sat:22 unsat:1

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:24 sat:22 unsat:2

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:25 sat:23 unsat:2

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:26 sat:24 unsat:2

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:27 sat:25 unsat:2

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:28 sat:25 unsat:3

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:29 sat:26 unsat:3

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:30 sat:27 unsat:3

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:31 sat:28 unsat:3

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:32 sat:28 unsat:4

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:33 sat:29 unsat:4

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:34 sat:30 unsat:4

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:35 sat:31 unsat:4

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:36 sat:31 unsat:5

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:37 sat:32 unsat:5

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:38 sat:33 unsat:5

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

1

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_6)_7_[116] == CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

1
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[116] == CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

1
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_6)_7_[116] == CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

1
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_6)_7_[116] == CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

1
numeric PC: constraint # = 9
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ == CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_6)_7_[116] == CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:39 sat:34 unsat:5

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:40 sat:35 unsat:5

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:41 sat:36 unsat:5

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:42 sat:36 unsat:6

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:43 sat:37 unsat:6

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:44 sat:38 unsat:6

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:45 sat:39 unsat:6

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:46 sat:39 unsat:7

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:47 sat:40 unsat:7

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:48 sat:41 unsat:7

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:49 sat:42 unsat:7

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:50 sat:42 unsat:8

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:51 sat:43 unsat:8

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:52 sat:44 unsat:8

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:53 sat:45 unsat:8

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:54 sat:45 unsat:9

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:55 sat:46 unsat:9

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:56 sat:47 unsat:9

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:57 sat:48 unsat:9

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:58 sat:48 unsat:10

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:59 sat:49 unsat:10

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:60 sat:50 unsat:10

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "t"))
(assert ( ==  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_116 &&
CharAt(CONST_5)_6_ == CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_6)_7_[0] != CONST_116 &&
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_5)_6_[112] == CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:61 sat:51 unsat:10

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:62 sat:52 unsat:10

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:63 sat:53 unsat:10

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:64 sat:53 unsat:11

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:65 sat:54 unsat:11

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:66 sat:55 unsat:11

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:67 sat:56 unsat:11

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:68 sat:56 unsat:12

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:69 sat:57 unsat:12

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:70 sat:58 unsat:12

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:71 sat:59 unsat:12

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:72 sat:59 unsat:13

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:73 sat:60 unsat:13

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:74 sat:61 unsat:13

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:75 sat:62 unsat:13

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:76 sat:62 unsat:14

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:77 sat:63 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:78 sat:64 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:79 sat:65 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:80 sat:66 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:81 sat:67 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:82 sat:68 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:83 sat:69 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:84 sat:70 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "p"))
(assert ( ==  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_112 &&
CharAt(CONST_4)_5_ == CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_5)_6_[0] != CONST_112 &&
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_4)_5_[105] == CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 7
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:85 sat:71 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:86 sat:72 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:87 sat:73 unsat:14

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:88 sat:73 unsat:15

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:89 sat:74 unsat:15

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:90 sat:75 unsat:15

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:91 sat:76 unsat:15

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:92 sat:76 unsat:16

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:93 sat:77 unsat:16

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:94 sat:78 unsat:16

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:95 sat:79 unsat:16

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:96 sat:79 unsat:17

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:97 sat:80 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:98 sat:81 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:99 sat:82 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:100 sat:83 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:101 sat:84 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:102 sat:85 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:103 sat:86 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:104 sat:87 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:105 sat:88 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:106 sat:89 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:107 sat:90 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:108 sat:91 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:109 sat:92 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:110 sat:93 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:111 sat:94 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:112 sat:95 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:113 sat:96 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:114 sat:97 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:115 sat:98 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:116 sat:99 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:117 sat:100 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:118 sat:101 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:119 sat:102 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:120 sat:103 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "i"))
(assert ( ==  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

0
numeric PC: constraint # = 7
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_105 &&
CharAt(CONST_3)_4_ == CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_4)_5_[0] != CONST_105 &&
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

numeric PC: constraint # = 5
CharAt(CONST_3)_4_[114] == CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 6
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:121 sat:104 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:122 sat:105 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:123 sat:106 unsat:17

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:124 sat:106 unsat:18

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 7
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:125 sat:107 unsat:18

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:126 sat:108 unsat:18

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:127 sat:109 unsat:18

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:128 sat:109 unsat:19

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:129 sat:110 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:130 sat:111 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:131 sat:112 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:132 sat:113 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:133 sat:114 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:134 sat:115 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:135 sat:116 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:136 sat:117 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:137 sat:118 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:138 sat:119 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:139 sat:120 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:140 sat:121 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:141 sat:122 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:142 sat:123 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:143 sat:124 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:144 sat:125 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:145 sat:126 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:146 sat:127 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:147 sat:128 unsat:19

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:148 sat:128 unsat:20

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:149 sat:129 unsat:20

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:150 sat:130 unsat:20

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:151 sat:131 unsat:20

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:152 sat:132 unsat:20

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:153 sat:133 unsat:20

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:154 sat:133 unsat:21

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:155 sat:134 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:156 sat:135 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:157 sat:136 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:158 sat:137 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:159 sat:138 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:160 sat:139 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:161 sat:140 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:162 sat:141 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:163 sat:142 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:164 sat:143 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:165 sat:144 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:166 sat:145 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:167 sat:146 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:168 sat:147 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:169 sat:148 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:170 sat:149 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:171 sat:150 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:172 sat:151 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:173 sat:152 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:174 sat:153 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:175 sat:154 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:176 sat:155 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:177 sat:156 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:178 sat:157 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:179 sat:158 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:180 sat:159 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:181 sat:160 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:182 sat:161 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:183 sat:162 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:184 sat:163 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:185 sat:164 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:186 sat:165 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:187 sat:166 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:188 sat:167 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:189 sat:168 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:190 sat:169 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:191 sat:170 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:192 sat:171 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:193 sat:172 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:194 sat:173 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:195 sat:174 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:196 sat:175 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "r"))
(assert ( ==  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 8
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 7
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 6
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

0
numeric PC: constraint # = 6
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_114 &&
CharAt(CONST_2)_3_ == CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 5
CharAt(CONST_3)_4_[0] != CONST_114 &&
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

numeric PC: constraint # = 4
CharAt(CONST_2)_3_[99] == CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 5
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:197 sat:176 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 5
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:198 sat:177 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 6
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:199 sat:178 unsat:21

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:200 sat:178 unsat:22

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 6
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:201 sat:179 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:202 sat:180 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:203 sat:181 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:204 sat:182 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:205 sat:183 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:206 sat:184 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:207 sat:185 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:208 sat:186 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:209 sat:187 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:210 sat:188 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:211 sat:189 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:212 sat:190 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:213 sat:191 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:214 sat:192 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:215 sat:193 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:216 sat:194 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:217 sat:195 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:218 sat:196 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:219 sat:197 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:220 sat:198 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[112] == CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:221 sat:199 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:222 sat:200 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:223 sat:201 unsat:22

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:224 sat:201 unsat:23

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:225 sat:202 unsat:23

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:226 sat:203 unsat:23

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[0] != CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:227 sat:204 unsat:23

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:228 sat:205 unsat:23

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:229 sat:206 unsat:23

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:230 sat:206 unsat:24

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:231 sat:207 unsat:24

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:232 sat:208 unsat:24

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:233 sat:209 unsat:24

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:234 sat:209 unsat:25

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:235 sat:210 unsat:25

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:236 sat:211 unsat:25

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:237 sat:212 unsat:25

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:238 sat:213 unsat:25

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:239 sat:214 unsat:25

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:240 sat:214 unsat:26

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:241 sat:215 unsat:26

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:242 sat:216 unsat:26

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:243 sat:217 unsat:26

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:244 sat:217 unsat:27

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:245 sat:218 unsat:27

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:246 sat:219 unsat:27

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:247 sat:220 unsat:27

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:248 sat:221 unsat:27

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:249 sat:222 unsat:27

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:250 sat:223 unsat:27

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:251 sat:224 unsat:27

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:252 sat:224 unsat:28

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:253 sat:225 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:254 sat:226 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:255 sat:227 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:256 sat:228 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:257 sat:229 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:258 sat:230 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:259 sat:231 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:260 sat:232 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:261 sat:233 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:262 sat:234 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:263 sat:235 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:264 sat:236 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:265 sat:237 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:266 sat:238 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:267 sat:239 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:268 sat:240 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:269 sat:241 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:270 sat:242 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:271 sat:243 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:272 sat:244 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:273 sat:245 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:274 sat:246 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:275 sat:247 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:276 sat:248 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:277 sat:249 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:278 sat:250 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:279 sat:251 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:280 sat:252 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:281 sat:253 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:282 sat:254 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:283 sat:255 unsat:28

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:284 sat:255 unsat:29

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:285 sat:256 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:286 sat:257 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:287 sat:258 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:288 sat:259 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:289 sat:260 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:290 sat:261 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:291 sat:262 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:292 sat:263 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:293 sat:264 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:294 sat:265 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:295 sat:266 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:296 sat:267 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:297 sat:268 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:298 sat:269 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:299 sat:270 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:300 sat:271 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:301 sat:272 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:302 sat:273 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:303 sat:274 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:304 sat:275 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:305 sat:276 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:306 sat:277 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:307 sat:278 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:308 sat:279 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:309 sat:280 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:310 sat:281 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:311 sat:282 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:312 sat:283 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:313 sat:284 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:314 sat:285 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:315 sat:286 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:316 sat:287 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:317 sat:288 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:318 sat:289 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:319 sat:290 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:320 sat:291 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:321 sat:292 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:322 sat:293 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:323 sat:294 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:324 sat:295 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:325 sat:296 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:326 sat:297 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:327 sat:298 unsat:29

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:328 sat:298 unsat:30

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:329 sat:299 unsat:30

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:330 sat:300 unsat:30

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:331 sat:301 unsat:30

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:332 sat:302 unsat:30

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:333 sat:303 unsat:30

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:334 sat:303 unsat:31

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:335 sat:304 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:336 sat:305 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:337 sat:306 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:338 sat:307 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:339 sat:308 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:340 sat:309 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:341 sat:310 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:342 sat:311 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:343 sat:312 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:344 sat:313 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:345 sat:314 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:346 sat:315 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:347 sat:316 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:348 sat:317 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:349 sat:318 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:350 sat:319 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:351 sat:320 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:352 sat:321 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:353 sat:322 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:354 sat:323 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:355 sat:324 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:356 sat:325 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:357 sat:326 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:358 sat:327 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:359 sat:328 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:360 sat:329 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:361 sat:330 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:362 sat:331 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:363 sat:332 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:364 sat:333 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:365 sat:334 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:366 sat:335 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:367 sat:336 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:368 sat:337 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:369 sat:338 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:370 sat:339 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:371 sat:340 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:372 sat:341 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:373 sat:342 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:374 sat:343 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:375 sat:344 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:376 sat:345 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "c"))
(assert ( ==  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 8
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 6
CONST_9 < (Length_0_[9] + CONST_1) &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 6
CONST_9 >= (Length_0_ + CONST_1) &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 5
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

0
numeric PC: constraint # = 5
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_99 &&
CharAt(CONST_1)_2_ == CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 4
CharAt(CONST_2)_3_[0] != CONST_99 &&
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

numeric PC: constraint # = 3
CharAt(CONST_1)_2_[115] == CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 4
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:377 sat:346 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 4
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:378 sat:347 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 5
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:379 sat:348 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 5
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:380 sat:349 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 6
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:381 sat:350 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:382 sat:351 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:383 sat:352 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:384 sat:353 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:385 sat:354 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:386 sat:355 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:387 sat:356 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:388 sat:357 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:389 sat:358 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:390 sat:359 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:391 sat:360 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:392 sat:361 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:393 sat:362 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:394 sat:363 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:395 sat:364 unsat:31

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:396 sat:364 unsat:32

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:397 sat:365 unsat:32

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:398 sat:366 unsat:32

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:399 sat:367 unsat:32

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:400 sat:367 unsat:33

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:401 sat:368 unsat:33

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:402 sat:369 unsat:33

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

1

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_7)_8_[116] == CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

1
numeric PC: constraint # = 12
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_7)_8_[116] == CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:403 sat:370 unsat:33

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:404 sat:371 unsat:33

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:405 sat:372 unsat:33

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:406 sat:372 unsat:34

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:407 sat:373 unsat:34

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:408 sat:374 unsat:34

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:409 sat:375 unsat:34

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:410 sat:375 unsat:35

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:411 sat:376 unsat:35

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:412 sat:377 unsat:35

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_7)_8_[0] != CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_7)_8_[0] != CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:413 sat:378 unsat:35

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:414 sat:379 unsat:35

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:415 sat:380 unsat:35

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:416 sat:380 unsat:36

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:417 sat:381 unsat:36

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:418 sat:382 unsat:36

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:419 sat:383 unsat:36

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:420 sat:383 unsat:37

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:421 sat:384 unsat:37

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:422 sat:385 unsat:37

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:423 sat:386 unsat:37

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:424 sat:386 unsat:38

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:425 sat:387 unsat:38

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:426 sat:388 unsat:38

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_6)_7_[0] != CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:427 sat:389 unsat:38

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:428 sat:390 unsat:38

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:429 sat:391 unsat:38

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:430 sat:391 unsat:39

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:431 sat:392 unsat:39

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:432 sat:393 unsat:39

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:433 sat:394 unsat:39

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:434 sat:394 unsat:40

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:435 sat:395 unsat:40

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:436 sat:396 unsat:40

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:437 sat:397 unsat:40

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:438 sat:397 unsat:41

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:439 sat:398 unsat:41

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:440 sat:399 unsat:41

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:441 sat:400 unsat:41

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:442 sat:401 unsat:41

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:443 sat:402 unsat:41

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:444 sat:403 unsat:41

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:445 sat:404 unsat:41

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:446 sat:404 unsat:42

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:447 sat:405 unsat:42

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:448 sat:406 unsat:42

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:449 sat:407 unsat:42

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:450 sat:407 unsat:43

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:451 sat:408 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:452 sat:409 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:453 sat:410 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:454 sat:411 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:455 sat:412 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:456 sat:413 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:457 sat:414 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:458 sat:415 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:459 sat:416 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:460 sat:417 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:461 sat:418 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:462 sat:419 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:463 sat:420 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:464 sat:421 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:465 sat:422 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:466 sat:423 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:467 sat:424 unsat:43

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:468 sat:424 unsat:44

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:469 sat:425 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:470 sat:426 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:471 sat:427 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:472 sat:428 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:473 sat:429 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:474 sat:430 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:475 sat:431 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:476 sat:432 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:477 sat:433 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:478 sat:434 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:479 sat:435 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:480 sat:436 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:481 sat:437 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:482 sat:438 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:483 sat:439 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:484 sat:440 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:485 sat:441 unsat:44

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:486 sat:441 unsat:45

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:487 sat:442 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:488 sat:443 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:489 sat:444 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:490 sat:445 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:491 sat:446 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:492 sat:447 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:493 sat:448 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:494 sat:449 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:495 sat:450 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:496 sat:451 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:497 sat:452 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:498 sat:453 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:499 sat:454 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:500 sat:455 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:501 sat:456 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:502 sat:457 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:503 sat:458 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:504 sat:459 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:505 sat:460 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:506 sat:461 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:507 sat:462 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:508 sat:463 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:509 sat:464 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:510 sat:465 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 7
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:511 sat:466 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:512 sat:467 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:513 sat:468 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:514 sat:469 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:515 sat:470 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:516 sat:471 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:517 sat:472 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:518 sat:473 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:519 sat:474 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:520 sat:475 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:521 sat:476 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:522 sat:477 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:523 sat:478 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:524 sat:479 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:525 sat:480 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:526 sat:481 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:527 sat:482 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:528 sat:483 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:529 sat:484 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:530 sat:485 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:531 sat:486 unsat:45

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:532 sat:486 unsat:46

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:533 sat:487 unsat:46

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:534 sat:488 unsat:46

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:535 sat:489 unsat:46

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:536 sat:490 unsat:46

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:537 sat:491 unsat:46

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:538 sat:491 unsat:47

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:539 sat:492 unsat:47

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:540 sat:493 unsat:47

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:541 sat:494 unsat:47

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:542 sat:494 unsat:48

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:543 sat:495 unsat:48

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:544 sat:496 unsat:48

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:545 sat:497 unsat:48

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:546 sat:498 unsat:48

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:547 sat:499 unsat:48

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:548 sat:499 unsat:49

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:549 sat:500 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:550 sat:501 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:551 sat:502 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:552 sat:503 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:553 sat:504 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:554 sat:505 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:555 sat:506 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:556 sat:507 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:557 sat:508 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:558 sat:509 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:559 sat:510 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:560 sat:511 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:561 sat:512 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:562 sat:513 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:563 sat:514 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:564 sat:515 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:565 sat:516 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:566 sat:517 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:567 sat:518 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:568 sat:519 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:569 sat:520 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:570 sat:521 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:571 sat:522 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:572 sat:523 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:573 sat:524 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:574 sat:525 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:575 sat:526 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:576 sat:527 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:577 sat:528 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:578 sat:529 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:579 sat:530 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:580 sat:531 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:581 sat:532 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:582 sat:533 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:583 sat:534 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:584 sat:535 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:585 sat:536 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:586 sat:537 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:587 sat:538 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:588 sat:539 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:589 sat:540 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:590 sat:541 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:591 sat:542 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:592 sat:543 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:593 sat:544 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:594 sat:545 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:595 sat:546 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:596 sat:547 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:597 sat:548 unsat:49

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:598 sat:548 unsat:50

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:599 sat:549 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:600 sat:550 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:601 sat:551 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:602 sat:552 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:603 sat:553 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:604 sat:554 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:605 sat:555 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:606 sat:556 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:607 sat:557 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:608 sat:558 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:609 sat:559 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:610 sat:560 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:611 sat:561 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:612 sat:562 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:613 sat:563 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:614 sat:564 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:615 sat:565 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:616 sat:566 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:617 sat:567 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:618 sat:568 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:619 sat:569 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:620 sat:570 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:621 sat:571 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:622 sat:572 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 7
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 7
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 5
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[60] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 6
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:623 sat:573 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:624 sat:574 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:625 sat:575 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:626 sat:576 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:627 sat:577 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:628 sat:578 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:629 sat:579 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:630 sat:580 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:631 sat:581 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:632 sat:582 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:633 sat:583 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:634 sat:584 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:635 sat:585 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:636 sat:586 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:637 sat:587 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:638 sat:588 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:639 sat:589 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:640 sat:590 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:641 sat:591 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:642 sat:592 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[112] == CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:643 sat:593 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:644 sat:594 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:645 sat:595 unsat:50

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:646 sat:595 unsat:51

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:647 sat:596 unsat:51

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:648 sat:597 unsat:51

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[0] != CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:649 sat:598 unsat:51

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:650 sat:599 unsat:51

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:651 sat:600 unsat:51

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:652 sat:600 unsat:52

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:653 sat:601 unsat:52

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:654 sat:602 unsat:52

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:655 sat:603 unsat:52

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:656 sat:603 unsat:53

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:657 sat:604 unsat:53

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:658 sat:605 unsat:53

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:659 sat:606 unsat:53

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:660 sat:607 unsat:53

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:661 sat:608 unsat:53

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:662 sat:608 unsat:54

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:663 sat:609 unsat:54

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:664 sat:610 unsat:54

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:665 sat:611 unsat:54

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:666 sat:611 unsat:55

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:667 sat:612 unsat:55

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:668 sat:613 unsat:55

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:669 sat:614 unsat:55

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:670 sat:615 unsat:55

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:671 sat:616 unsat:55

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:672 sat:617 unsat:55

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:673 sat:618 unsat:55

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:674 sat:618 unsat:56

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:675 sat:619 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:676 sat:620 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:677 sat:621 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:678 sat:622 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:679 sat:623 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:680 sat:624 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:681 sat:625 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:682 sat:626 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:683 sat:627 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:684 sat:628 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:685 sat:629 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:686 sat:630 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:687 sat:631 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:688 sat:632 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:689 sat:633 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:690 sat:634 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:691 sat:635 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:692 sat:636 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:693 sat:637 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:694 sat:638 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:695 sat:639 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:696 sat:640 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:697 sat:641 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:698 sat:642 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:699 sat:643 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:700 sat:644 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:701 sat:645 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:702 sat:646 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:703 sat:647 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:704 sat:648 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:705 sat:649 unsat:56

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:706 sat:649 unsat:57

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:707 sat:650 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:708 sat:651 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:709 sat:652 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:710 sat:653 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:711 sat:654 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:712 sat:655 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:713 sat:656 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:714 sat:657 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:715 sat:658 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:716 sat:659 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:717 sat:660 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:718 sat:661 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:719 sat:662 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:720 sat:663 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:721 sat:664 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:722 sat:665 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:723 sat:666 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:724 sat:667 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:725 sat:668 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:726 sat:669 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:727 sat:670 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:728 sat:671 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:729 sat:672 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:730 sat:673 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:731 sat:674 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:732 sat:675 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:733 sat:676 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:734 sat:677 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:735 sat:678 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:736 sat:679 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:737 sat:680 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:738 sat:681 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:739 sat:682 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:740 sat:683 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:741 sat:684 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:742 sat:685 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:743 sat:686 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:744 sat:687 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:745 sat:688 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:746 sat:689 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:747 sat:690 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:748 sat:691 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:749 sat:692 unsat:57

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:750 sat:692 unsat:58

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:751 sat:693 unsat:58

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:752 sat:694 unsat:58

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:753 sat:695 unsat:58

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:754 sat:696 unsat:58

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:755 sat:697 unsat:58

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:756 sat:697 unsat:59

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:757 sat:698 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:758 sat:699 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:759 sat:700 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:760 sat:701 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:761 sat:702 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:762 sat:703 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:763 sat:704 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:764 sat:705 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:765 sat:706 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:766 sat:707 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:767 sat:708 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:768 sat:709 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:769 sat:710 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:770 sat:711 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:771 sat:712 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:772 sat:713 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:773 sat:714 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:774 sat:715 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:775 sat:716 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:776 sat:717 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:777 sat:718 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:778 sat:719 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:779 sat:720 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:780 sat:721 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:781 sat:722 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:782 sat:723 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:783 sat:724 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:784 sat:725 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:785 sat:726 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:786 sat:727 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:787 sat:728 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:788 sat:729 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:789 sat:730 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:790 sat:731 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:791 sat:732 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:792 sat:733 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:793 sat:734 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:794 sat:735 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:795 sat:736 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:796 sat:737 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:797 sat:738 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:798 sat:739 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "s"))
(assert ( ==  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 8
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 6
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 6
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 5
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 4
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

0
numeric PC: constraint # = 4
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_115 &&
CharAt(CONST_0)_1_ == CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 3
CharAt(CONST_1)_2_[0] != CONST_115 &&
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

numeric PC: constraint # = 2
CharAt(CONST_0)_1_[60] == CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 3
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:799 sat:740 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 3
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:800 sat:741 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 4
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:801 sat:742 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 4
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:802 sat:743 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 5
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:803 sat:744 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 5
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:804 sat:745 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 6
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:805 sat:746 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:806 sat:747 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:807 sat:748 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:808 sat:749 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:809 sat:750 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:810 sat:751 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:811 sat:752 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:812 sat:753 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:813 sat:754 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:814 sat:755 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:815 sat:756 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:816 sat:757 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:817 sat:758 unsat:59

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:818 sat:758 unsat:60

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:819 sat:759 unsat:60

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:820 sat:760 unsat:60

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:821 sat:761 unsat:60

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:822 sat:761 unsat:61

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:823 sat:762 unsat:61

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:824 sat:763 unsat:61

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:825 sat:764 unsat:61

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:826 sat:764 unsat:62

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:827 sat:765 unsat:62

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:828 sat:766 unsat:62

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

1

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_7)_8_[116] == CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

1
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_7)_8_[116] == CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

1
numeric PC: constraint # = 11
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ == CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_7)_8_[116] == CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:829 sat:767 unsat:62

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:830 sat:768 unsat:62

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:831 sat:769 unsat:62

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:832 sat:769 unsat:63

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:833 sat:770 unsat:63

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:834 sat:771 unsat:63

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:835 sat:772 unsat:63

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:836 sat:772 unsat:64

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:837 sat:773 unsat:64

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:838 sat:774 unsat:64

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:839 sat:775 unsat:64

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:840 sat:775 unsat:65

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:841 sat:776 unsat:65

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:842 sat:777 unsat:65

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "t"))
(assert ( ==  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_7)_8_[0] != CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_7)_8_[0] != CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_116 &&
CharAt(CONST_6)_7_ == CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_7)_8_[0] != CONST_116 &&
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_6)_7_[112] == CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:843 sat:778 unsat:65

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:844 sat:779 unsat:65

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:845 sat:780 unsat:65

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:846 sat:780 unsat:66

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:847 sat:781 unsat:66

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:848 sat:782 unsat:66

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:849 sat:783 unsat:66

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:850 sat:783 unsat:67

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:851 sat:784 unsat:67

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:852 sat:785 unsat:67

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:853 sat:786 unsat:67

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:854 sat:786 unsat:68

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:855 sat:787 unsat:68

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:856 sat:788 unsat:68

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:857 sat:789 unsat:68

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:858 sat:789 unsat:69

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:859 sat:790 unsat:69

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:860 sat:791 unsat:69

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "p"))
(assert ( ==  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_112 &&
CharAt(CONST_5)_6_ == CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_6)_7_[0] != CONST_112 &&
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_5)_6_[105] == CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:861 sat:792 unsat:69

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:862 sat:793 unsat:69

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:863 sat:794 unsat:69

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:864 sat:794 unsat:70

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:865 sat:795 unsat:70

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:866 sat:796 unsat:70

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:867 sat:797 unsat:70

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:868 sat:797 unsat:71

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:869 sat:798 unsat:71

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:870 sat:799 unsat:71

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:871 sat:800 unsat:71

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:872 sat:800 unsat:72

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:873 sat:801 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:874 sat:802 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:875 sat:803 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:876 sat:804 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:877 sat:805 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:878 sat:806 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:879 sat:807 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:880 sat:808 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "i"))
(assert ( ==  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_105 &&
CharAt(CONST_4)_5_ == CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_5)_6_[0] != CONST_105 &&
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_4)_5_[114] == CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:881 sat:809 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:882 sat:810 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:883 sat:811 unsat:72

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:884 sat:811 unsat:73

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:885 sat:812 unsat:73

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:886 sat:813 unsat:73

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:887 sat:814 unsat:73

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:888 sat:814 unsat:74

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:889 sat:815 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:890 sat:816 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:891 sat:817 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:892 sat:818 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:893 sat:819 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:894 sat:820 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:895 sat:821 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:896 sat:822 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:897 sat:823 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:898 sat:824 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:899 sat:825 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:900 sat:826 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:901 sat:827 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:902 sat:828 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:903 sat:829 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:904 sat:830 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:905 sat:831 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:906 sat:832 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:907 sat:833 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:908 sat:834 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:909 sat:835 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:910 sat:836 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:911 sat:837 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:912 sat:838 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "r"))
(assert ( ==  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_114 &&
CharAt(CONST_3)_4_ == CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_4)_5_[0] != CONST_114 &&
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_3)_4_[99] == CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 7
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:913 sat:839 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:914 sat:840 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:915 sat:841 unsat:74

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:916 sat:841 unsat:75

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:917 sat:842 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:918 sat:843 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:919 sat:844 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:920 sat:845 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:921 sat:846 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:922 sat:847 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:923 sat:848 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:924 sat:849 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:925 sat:850 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:926 sat:851 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:927 sat:852 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:928 sat:853 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:929 sat:854 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:930 sat:855 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:931 sat:856 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:932 sat:857 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:933 sat:858 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:934 sat:859 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:935 sat:860 unsat:75

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:936 sat:860 unsat:76

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:937 sat:861 unsat:76

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:938 sat:862 unsat:76

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:939 sat:863 unsat:76

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:940 sat:864 unsat:76

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:941 sat:865 unsat:76

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:942 sat:865 unsat:77

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:943 sat:866 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:944 sat:867 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:945 sat:868 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:946 sat:869 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:947 sat:870 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:948 sat:871 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:949 sat:872 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:950 sat:873 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:951 sat:874 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:952 sat:875 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:953 sat:876 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:954 sat:877 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:955 sat:878 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:956 sat:879 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:957 sat:880 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:958 sat:881 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:959 sat:882 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:960 sat:883 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:961 sat:884 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:962 sat:885 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:963 sat:886 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:964 sat:887 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:965 sat:888 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:966 sat:889 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:967 sat:890 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:968 sat:891 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:969 sat:892 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:970 sat:893 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:971 sat:894 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:972 sat:895 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:973 sat:896 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:974 sat:897 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:975 sat:898 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:976 sat:899 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:977 sat:900 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:978 sat:901 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:979 sat:902 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:980 sat:903 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:981 sat:904 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:982 sat:905 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:983 sat:906 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:984 sat:907 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "c"))
(assert ( ==  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 8
CONST_10 < (Length_0_[10] + CONST_1) &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 7
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_99 &&
CharAt(CONST_2)_3_ == CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_3)_4_[0] != CONST_99 &&
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 5
CharAt(CONST_2)_3_[115] == CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 6
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:985 sat:908 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:986 sat:909 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:987 sat:910 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:988 sat:911 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:989 sat:912 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:990 sat:913 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:991 sat:914 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:992 sat:915 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:993 sat:916 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:994 sat:917 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:995 sat:918 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:996 sat:919 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:997 sat:920 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:998 sat:921 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:999 sat:922 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1000 sat:923 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1001 sat:924 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1002 sat:925 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1003 sat:926 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1004 sat:927 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[112] == CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1005 sat:928 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1006 sat:929 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1007 sat:930 unsat:77

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1008 sat:930 unsat:78

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1009 sat:931 unsat:78

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1010 sat:932 unsat:78

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[0] != CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1011 sat:933 unsat:78

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1012 sat:934 unsat:78

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1013 sat:935 unsat:78

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1014 sat:935 unsat:79

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1015 sat:936 unsat:79

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1016 sat:937 unsat:79

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1017 sat:938 unsat:79

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1018 sat:938 unsat:80

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1019 sat:939 unsat:80

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1020 sat:940 unsat:80

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1021 sat:941 unsat:80

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1022 sat:942 unsat:80

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1023 sat:943 unsat:80

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1024 sat:943 unsat:81

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1025 sat:944 unsat:81

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1026 sat:945 unsat:81

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1027 sat:946 unsat:81

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1028 sat:946 unsat:82

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1029 sat:947 unsat:82

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1030 sat:948 unsat:82

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1031 sat:949 unsat:82

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1032 sat:950 unsat:82

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1033 sat:951 unsat:82

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1034 sat:952 unsat:82

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1035 sat:953 unsat:82

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1036 sat:953 unsat:83

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1037 sat:954 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1038 sat:955 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1039 sat:956 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1040 sat:957 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1041 sat:958 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1042 sat:959 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1043 sat:960 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1044 sat:961 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1045 sat:962 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1046 sat:963 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1047 sat:964 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1048 sat:965 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1049 sat:966 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1050 sat:967 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1051 sat:968 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1052 sat:969 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1053 sat:970 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1054 sat:971 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1055 sat:972 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1056 sat:973 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1057 sat:974 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1058 sat:975 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1059 sat:976 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1060 sat:977 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1061 sat:978 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1062 sat:979 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1063 sat:980 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1064 sat:981 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1065 sat:982 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1066 sat:983 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1067 sat:984 unsat:83

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1068 sat:984 unsat:84

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1069 sat:985 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1070 sat:986 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1071 sat:987 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1072 sat:988 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1073 sat:989 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1074 sat:990 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1075 sat:991 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1076 sat:992 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1077 sat:993 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1078 sat:994 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1079 sat:995 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1080 sat:996 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1081 sat:997 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1082 sat:998 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1083 sat:999 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1084 sat:1000 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1085 sat:1001 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1086 sat:1002 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1087 sat:1003 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1088 sat:1004 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1089 sat:1005 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1090 sat:1006 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1091 sat:1007 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1092 sat:1008 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[60] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1093 sat:1009 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1094 sat:1010 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1095 sat:1011 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1096 sat:1012 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1097 sat:1013 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1098 sat:1014 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1099 sat:1015 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1100 sat:1016 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1101 sat:1017 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1102 sat:1018 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1103 sat:1019 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1104 sat:1020 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1105 sat:1021 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1106 sat:1022 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1107 sat:1023 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1108 sat:1024 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1109 sat:1025 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1110 sat:1026 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1111 sat:1027 unsat:84

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1112 sat:1027 unsat:85

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1113 sat:1028 unsat:85

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1114 sat:1029 unsat:85

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1115 sat:1030 unsat:85

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1116 sat:1031 unsat:85

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1117 sat:1032 unsat:85

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1118 sat:1032 unsat:86

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1119 sat:1033 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1120 sat:1034 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1121 sat:1035 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1122 sat:1036 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1123 sat:1037 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1124 sat:1038 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1125 sat:1039 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1126 sat:1040 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1127 sat:1041 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1128 sat:1042 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1129 sat:1043 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1130 sat:1044 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1131 sat:1045 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1132 sat:1046 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1133 sat:1047 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1134 sat:1048 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1135 sat:1049 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1136 sat:1050 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1137 sat:1051 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1138 sat:1052 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1139 sat:1053 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1140 sat:1054 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1141 sat:1055 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1142 sat:1056 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1143 sat:1057 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1144 sat:1058 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1145 sat:1059 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1146 sat:1060 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1147 sat:1061 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1148 sat:1062 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1149 sat:1063 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1150 sat:1064 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1151 sat:1065 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1152 sat:1066 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1153 sat:1067 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1154 sat:1068 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1155 sat:1069 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1156 sat:1070 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1157 sat:1071 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1158 sat:1072 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1159 sat:1073 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1160 sat:1074 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "s"))
(assert ( ==  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 8
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 6
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 6
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_115 &&
CharAt(CONST_1)_2_ == CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 5
CharAt(CONST_2)_3_[0] != CONST_115 &&
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 4
CharAt(CONST_1)_2_[60] == CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 5
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1161 sat:1075 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 5
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1162 sat:1076 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 6
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1163 sat:1077 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 6
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1164 sat:1078 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 7
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1165 sat:1079 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1166 sat:1080 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1167 sat:1081 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1168 sat:1082 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1169 sat:1083 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1170 sat:1084 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1171 sat:1085 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1172 sat:1086 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1173 sat:1087 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1174 sat:1088 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1175 sat:1089 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1176 sat:1090 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1177 sat:1091 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1178 sat:1092 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1179 sat:1093 unsat:86

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1180 sat:1093 unsat:87

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1181 sat:1094 unsat:87

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1182 sat:1095 unsat:87

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( ==  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

1

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ == CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_8)_9_[116] == CONST_116 &&
CharAt(CONST_7)_8_[112] == CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1183 sat:1096 unsat:87

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1184 sat:1097 unsat:87

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1185 sat:1098 unsat:87

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1186 sat:1098 unsat:88

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1187 sat:1099 unsat:88

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1188 sat:1100 unsat:88

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "t"))
(assert ( ==  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_116 &&
CharAt(CONST_7)_8_ == CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_8)_9_[0] != CONST_116 &&
CharAt(CONST_7)_8_[112] == CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_7)_8_[112] == CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1189 sat:1101 unsat:88

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1190 sat:1102 unsat:88

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1191 sat:1103 unsat:88

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1192 sat:1103 unsat:89

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1193 sat:1104 unsat:89

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1194 sat:1105 unsat:89

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1195 sat:1106 unsat:89

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1196 sat:1106 unsat:90

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1197 sat:1107 unsat:90

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1198 sat:1108 unsat:90

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "p"))
(assert ( ==  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_7)_8_[0] != CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_112 &&
CharAt(CONST_6)_7_ == CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_7)_8_[0] != CONST_112 &&
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_6)_7_[105] == CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1199 sat:1109 unsat:90

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1200 sat:1110 unsat:90

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1201 sat:1111 unsat:90

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1202 sat:1111 unsat:91

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1203 sat:1112 unsat:91

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1204 sat:1113 unsat:91

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1205 sat:1114 unsat:91

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1206 sat:1114 unsat:92

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1207 sat:1115 unsat:92

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1208 sat:1116 unsat:92

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1209 sat:1117 unsat:92

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1210 sat:1117 unsat:93

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1211 sat:1118 unsat:93

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1212 sat:1119 unsat:93

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "i"))
(assert ( ==  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_105 &&
CharAt(CONST_5)_6_ == CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_6)_7_[0] != CONST_105 &&
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_5)_6_[114] == CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1213 sat:1120 unsat:93

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1214 sat:1121 unsat:93

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1215 sat:1122 unsat:93

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1216 sat:1122 unsat:94

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1217 sat:1123 unsat:94

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1218 sat:1124 unsat:94

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1219 sat:1125 unsat:94

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1220 sat:1125 unsat:95

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1221 sat:1126 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1222 sat:1127 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1223 sat:1128 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1224 sat:1129 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1225 sat:1130 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1226 sat:1131 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1227 sat:1132 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1228 sat:1133 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "r"))
(assert ( ==  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_114 &&
CharAt(CONST_4)_5_ == CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_5)_6_[0] != CONST_114 &&
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_4)_5_[99] == CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1229 sat:1134 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1230 sat:1135 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1231 sat:1136 unsat:95

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1232 sat:1136 unsat:96

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1233 sat:1137 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1234 sat:1138 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1235 sat:1139 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1236 sat:1140 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1237 sat:1141 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1238 sat:1142 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1239 sat:1143 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1240 sat:1144 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1241 sat:1145 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1242 sat:1146 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1243 sat:1147 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1244 sat:1148 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1245 sat:1149 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1246 sat:1150 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1247 sat:1151 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1248 sat:1152 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1249 sat:1153 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1250 sat:1154 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1251 sat:1155 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1252 sat:1156 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1253 sat:1157 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1254 sat:1158 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1255 sat:1159 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1256 sat:1160 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "c"))
(assert ( ==  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_99 &&
CharAt(CONST_3)_4_ == CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_4)_5_[0] != CONST_99 &&
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_3)_4_[115] == CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1257 sat:1161 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1258 sat:1162 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1259 sat:1163 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1260 sat:1164 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1261 sat:1165 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1262 sat:1166 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1263 sat:1167 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1264 sat:1168 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1265 sat:1169 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1266 sat:1170 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1267 sat:1171 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1268 sat:1172 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1269 sat:1173 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1270 sat:1174 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1271 sat:1175 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1272 sat:1176 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1273 sat:1177 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1274 sat:1178 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1275 sat:1179 unsat:96

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1276 sat:1179 unsat:97

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1277 sat:1180 unsat:97

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1278 sat:1181 unsat:97

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1279 sat:1182 unsat:97

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1280 sat:1183 unsat:97

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1281 sat:1184 unsat:97

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1282 sat:1184 unsat:98

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1283 sat:1185 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1284 sat:1186 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1285 sat:1187 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1286 sat:1188 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1287 sat:1189 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1288 sat:1190 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1289 sat:1191 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1290 sat:1192 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1291 sat:1193 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1292 sat:1194 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1293 sat:1195 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1294 sat:1196 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1295 sat:1197 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1296 sat:1198 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1297 sat:1199 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1298 sat:1200 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1299 sat:1201 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1300 sat:1202 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[60] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1301 sat:1203 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1302 sat:1204 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1303 sat:1205 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1304 sat:1206 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1305 sat:1207 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1306 sat:1208 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1307 sat:1209 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1308 sat:1210 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1309 sat:1211 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1310 sat:1212 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1311 sat:1213 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1312 sat:1214 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1313 sat:1215 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1314 sat:1216 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1315 sat:1217 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1316 sat:1218 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1317 sat:1219 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1318 sat:1220 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1319 sat:1221 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1320 sat:1222 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1321 sat:1223 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1322 sat:1224 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1323 sat:1225 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1324 sat:1226 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "s"))
(assert ( ==  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 8
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 8
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_115 &&
CharAt(CONST_2)_3_ == CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 7
CharAt(CONST_3)_4_[0] != CONST_115 &&
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_2)_3_[60] == CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 7
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1325 sat:1227 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 7
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1326 sat:1228 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 8
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1327 sat:1229 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 8
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1328 sat:1230 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 9
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1329 sat:1231 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1330 sat:1232 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1331 sat:1233 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1332 sat:1234 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1333 sat:1235 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1334 sat:1236 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1335 sat:1237 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1336 sat:1238 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1337 sat:1239 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1338 sat:1240 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_9)_10_ != CONST_116 &&
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1339 sat:1241 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 9) "t"))
(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_9)_10_ == CONST_116 &&
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1340 sat:1242 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 9) "t"))
(assert ( ==  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ == CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1341 sat:1243 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1342 sat:1244 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 8) "p"))
(assert ( ==  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_8)_9_ != CONST_112 &&
CharAt(CONST_7)_8_ == CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[105] == CONST_105 &&
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1343 sat:1245 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1344 sat:1246 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1345 sat:1247 unsat:98

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1346 sat:1247 unsat:99

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1347 sat:1248 unsat:99

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1348 sat:1249 unsat:99

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "i"))
(assert ( ==  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_105 &&
CharAt(CONST_6)_7_ == CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_7)_8_[0] != CONST_105 &&
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[114] == CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1349 sat:1250 unsat:99

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1350 sat:1251 unsat:99

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1351 sat:1252 unsat:99

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1352 sat:1252 unsat:100

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1353 sat:1253 unsat:100

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1354 sat:1254 unsat:100

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1355 sat:1255 unsat:100

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1356 sat:1255 unsat:101

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1357 sat:1256 unsat:101

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1358 sat:1257 unsat:101

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "r"))
(assert ( ==  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_114 &&
CharAt(CONST_5)_6_ == CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_6)_7_[0] != CONST_114 &&
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[99] == CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1359 sat:1258 unsat:101

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1360 sat:1259 unsat:101

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1361 sat:1260 unsat:101

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1362 sat:1260 unsat:102

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1363 sat:1261 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1364 sat:1262 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1365 sat:1263 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1366 sat:1264 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1367 sat:1265 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1368 sat:1266 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1369 sat:1267 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1370 sat:1268 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "c"))
(assert ( ==  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_99 &&
CharAt(CONST_4)_5_ == CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_5)_6_[0] != CONST_99 &&
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[115] == CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1371 sat:1269 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1372 sat:1270 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1373 sat:1271 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1374 sat:1272 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1375 sat:1273 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1376 sat:1274 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1377 sat:1275 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1378 sat:1276 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1379 sat:1277 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1380 sat:1278 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1381 sat:1279 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1382 sat:1280 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1383 sat:1281 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1384 sat:1282 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1385 sat:1283 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1386 sat:1284 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[60] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1387 sat:1285 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1388 sat:1286 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1389 sat:1287 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1390 sat:1288 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1391 sat:1289 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1392 sat:1290 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1393 sat:1291 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1394 sat:1292 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "s"))
(assert ( ==  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 10
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_115 &&
CharAt(CONST_3)_4_ == CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 9
CharAt(CONST_4)_5_[0] != CONST_115 &&
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[60] == CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1395 sat:1293 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 9
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1396 sat:1294 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 10
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1397 sat:1295 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 10
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1398 sat:1296 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 11
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1399 sat:1297 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1400 sat:1298 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1401 sat:1299 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1402 sat:1300 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1403 sat:1301 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1404 sat:1302 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_8)_9_ != CONST_105 &&
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1405 sat:1303 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 8) "i"))
(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_8)_9_ == CONST_105 &&
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1406 sat:1304 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 8) "i"))
(assert ( ==  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ == CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1407 sat:1305 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1408 sat:1306 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 7) "r"))
(assert ( ==  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_7)_8_ != CONST_114 &&
CharAt(CONST_6)_7_ == CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[99] == CONST_99 &&
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1409 sat:1307 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1410 sat:1308 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1411 sat:1309 unsat:102

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> false

### PCs: total:1412 sat:1309 unsat:103

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1413 sat:1310 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1414 sat:1311 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "c"))
(assert ( ==  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_99 &&
CharAt(CONST_5)_6_ == CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_6)_7_[0] != CONST_99 &&
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[115] == CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1415 sat:1312 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1416 sat:1313 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1417 sat:1314 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1418 sat:1315 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1419 sat:1316 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1420 sat:1317 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1421 sat:1318 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1422 sat:1319 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "s"))
(assert ( ==  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 12
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_115 &&
CharAt(CONST_4)_5_ == CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 11
CharAt(CONST_5)_6_[0] != CONST_115 &&
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[60] == CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1423 sat:1320 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 11
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1424 sat:1321 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 12
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1425 sat:1322 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 12
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1426 sat:1323 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1427 sat:1324 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1428 sat:1325 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_7)_8_ != CONST_99 &&
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1429 sat:1326 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 7) "c"))
(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_7)_8_ == CONST_99 &&
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1430 sat:1327 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 7) "c"))
(assert ( ==  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ == CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1431 sat:1328 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1432 sat:1329 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 6) "s"))
(assert ( ==  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:12)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CharAt(CONST_6)_7_ != CONST_115 &&
CharAt(CONST_5)_6_ == CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[60] == CONST_60 &&
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1433 sat:1330 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( >=  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 13
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1434 sat:1331 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
numeric PC: constraint # = 14
CharAt(CONST_6)_7_ != CONST_60 &&
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1435 sat:1332 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( !=  (charAt haystack_1 6) "<"))
(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)



numeric PC: constraint # = 14
CharAt(CONST_6)_7_ == CONST_60 &&
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

### PCs: total:1436 sat:1333 unsat:103

Calling isSat.


SMT-LIB TRANSLATION: 

(declare-fun haystack_1 () String)

(assert ( ==  (charAt haystack_1 6) "<"))
(assert ( <  13 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 5) "<"))
(assert ( <  12 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 4) "<"))
(assert ( <  11 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 3) "<"))
(assert ( <  10 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 2) "<"))
(assert ( <  9 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 1) "<"))
(assert ( <  8 ( +  (length haystack_1) 1)))
(assert ( !=  (charAt haystack_1 0) "<"))
(assert ( <  7 ( +  (length haystack_1) 1)))
(check-sat)




====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at strings.StringSearch.search_1(StringSearch.java:15)
	at strings.StringSearch.main(StringSearch.java:7)

numeric PC: constraint # = 13
CONST_13 < (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

0

====================================================== search constraint
depth limit reached: 15

====================================================== snapshot 
no live threads
numeric PC: constraint # = 13
CONST_13 >= (Length_0_ + CONST_1) &&
CharAt(CONST_5)_6_ != CONST_60 &&
CONST_12 < (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 12
CharAt(CONST_5)_6_[0] != CONST_60 &&
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

numeric PC: constraint # = 11
CONST_12 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[12] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[12] + CONST_1) -> true

0
numeric PC: constraint # = 11
CONST_12 >= (Length_0_ + CONST_1) &&
CharAt(CONST_4)_5_ != CONST_60 &&
CONST_11 < (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 10
CharAt(CONST_4)_5_[0] != CONST_60 &&
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

numeric PC: constraint # = 9
CONST_11 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[11] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[11] + CONST_1) -> true

0
numeric PC: constraint # = 9
CONST_11 >= (Length_0_ + CONST_1) &&
CharAt(CONST_3)_4_ != CONST_60 &&
CONST_10 < (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 8
CharAt(CONST_3)_4_[0] != CONST_60 &&
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

numeric PC: constraint # = 7
CONST_10 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[10] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[10] + CONST_1) -> true

0
numeric PC: constraint # = 7
CONST_10 >= (Length_0_ + CONST_1) &&
CharAt(CONST_2)_3_ != CONST_60 &&
CONST_9 < (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 6
CharAt(CONST_2)_3_[0] != CONST_60 &&
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

numeric PC: constraint # = 5
CONST_9 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[9] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[9] + CONST_1) -> true

0
numeric PC: constraint # = 5
CONST_9 >= (Length_0_ + CONST_1) &&
CharAt(CONST_1)_2_ != CONST_60 &&
CONST_8 < (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 4
CharAt(CONST_1)_2_[0] != CONST_60 &&
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

numeric PC: constraint # = 3
CONST_8 < (Length_0_[8] + CONST_1) &&
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[8] + CONST_1) -> true

0
numeric PC: constraint # = 3
CONST_8 >= (Length_0_ + CONST_1) &&
CharAt(CONST_0)_1_ != CONST_60 &&
CONST_7 < (Length_0_ + CONST_1) -> true

numeric PC: constraint # = 2
CharAt(CONST_0)_1_[0] != CONST_60 &&
CONST_7 < (Length_0_[7] + CONST_1) -> true

numeric PC: constraint # = 1
CONST_7 < (Length_0_[7] + CONST_1) -> true

0
numeric PC: constraint # = 1
CONST_7 >= (Length_0_ + CONST_1) -> true


====================================================== Method Sequences
[search_1(java.lang.String@15d,**UNDEFINED**)]

====================================================== JUnit 4.0 test class
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

public class strings_StringSearchTest {

	private strings.StringSearch strings_stringsearch;

	@Before
	public void setUp() throws Exception {
		strings_stringsearch = new strings.StringSearch();
	}

	@Test
	public void test0() {
		strings_stringsearch.search_1(java.lang.String@15d,**UNDEFINED**);
	}
}

====================================================== results
no errors detected

====================================================== statistics
elapsed time:       00:00:00
states:             new=826,visited=0,backtracked=826,end=210
search:             maxDepth=15,constraints=274
choice generators:  thread=1 (signal=0,lock=1,sharedRef=0,threadApi=0,reschedule=0), data=413
heap:               new=350,released=1892,maxLive=348,gcCycles=826
instructions:       45910
max memory:         481MB
loaded code:        classes=56,methods=1180

====================================================== search finished: 10/2/15 2:17 PM
